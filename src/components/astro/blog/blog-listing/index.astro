---
import { getCollection } from 'astro:content';

import type { CollectionEntry } from 'astro:content';

import { InternalLink } from '@/components/react/link/internal';

import { formatPublishedDate } from '@/lib/date-time';
import { getSlugDepth, getUriFromCollectionAndSlug } from '@/lib/url';

type Props = {
	type: CollectionEntry<'blog'>['data']['blogMeta']['type'];
};

const { type } = Astro.props;

const listingByType = await getCollection('blog', (entry) => {
	const matchingEntry = entry.data.blogMeta.type === type;

	if (matchingEntry && type === 'standalone') {
		return getSlugDepth(entry.slug) === 1;
	}

	if (matchingEntry && type === 'series') {
		return true;
	}

	return false;
});

type BlogListing = {
	title: string;
	uri: `/${string}`;
	seriesLength?: number;
	publishedDate: Date;
};

const listingDetails = listingByType
	.sort((a, b) => {
		return new Date(b.data.publishedDate).getTime() - new Date(a.data.publishedDate).getTime();
	})
	.map((blog) => ({
		title: blog.data.title,
		publishedDate: blog.data.publishedDate,
		uri: getUriFromCollectionAndSlug({ collection: blog.collection, slug: blog.slug }),
		seriesLength: blog.data.blogMeta.type === 'series' ? blog.data.blogMeta.relatedBlogs.length : 0
	})) satisfies Array<BlogListing>;
---

{
	listingByType.length > 0 ? (
		<>
			<ul class="flex flex-col gap-5">
				{listingDetails.map((listing) => (
					<li>
						<InternalLink href={listing.uri} title="View the series" variant="highContrast">
							{listing.title}
						</InternalLink>
						<p class="mt-1 flex flex-wrap items-center gap-2 text-sm">
							<time datetime={listing.publishedDate.toISOString()}>{formatPublishedDate(listing.publishedDate)}</time>
							{Boolean(listing.seriesLength) && <span>- ({listing.seriesLength} part series)</span>}
						</p>
					</li>
				))}
			</ul>
		</>
	) : null
}
